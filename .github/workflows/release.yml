name: Release Build
run-name: Release ${{ inputs.custom || inputs.semver }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      semver:
        type: choice
        description: Which version you want to increment?
        options:
          - patch
          - minor
          - major
        required: true
      custom:
        description: 'Custom tag name (i.e v1.0.0-rc)'
        required: false
        default: ''
  # push:
  #   tags:
  #     - v*

env:
  PACKAGE_NAME: 'github.com/qwqcode/test'
  GO_VERSION: '1.19.4'
  DOCKER_IMAGE: ghcr.io/goreleaser/goreleaser-cross
  IMAGE_CACHE_DIR: /tmp/cache/docker-image
  UI_NPM_PKG_FILE: 'ui/package.json'
  GIT_CHGLOG_VERSION: 'v0.15.2'

jobs:
  tagging:
    name: Tagging new version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Git Fetch
        run: git fetch --prune --unshallow --tags -f

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org/

      - name: Handle Version Number
        run: |
          if [ ! -z "${{ inputs.custom }}" ]; then
            next_version="${{ inputs.custom }}"
          else
            npm install -g semver
            prev_version="$(git describe --tags --abbrev=0)"
            echo "prev_version: $prev_version"
            next_version="v$(semver --increment ${{ inputs.semver }} ${prev_version})"
          fi
          
          if [[ ! "$next_version" =~ ^v.* ]]; then
            echo "[err] custom tag name must be v*."
            exit 1
          fi

          echo "next_version: $next_version"
          echo "VERSION=$next_version" >> $GITHUB_ENV

      - &setup-git-chglog
        name: Setup git-chglog
        run: |
            curl -sL $(curl -s https://api.github.com/repos/git-chglog/git-chglog/releases/latest \
              | grep -oP '"https://.+linux_amd64.tar.gz"' | tr -d \") | tar -C /usr/local/bin -xz git-chglog
            git-chglog --version

      - name: Changelog and Tagging
        run: |
          if [ ! $(git tag -l "$VERSION") ]; then
            git-chglog --next-tag $VERSION -o CHANGELOG.md
            perl -i -pe 's/"version": ".*?"/"version": "'${VERSION#v}'"/g' "$UI_NPM_PKG_FILE"

            git config user.name github-actions[bot]
            git config user.email 41898282+github-actions[bot]@users.noreply.github.com
            git add CHANGELOG.md "$UI_NPM_PKG_FILE"
            git commit -m "chore: release $VERSION"
            git tag "$VERSION"

            git push origin master "$VERSION"
          else
            echo "skipped because git tag already exists."
          fi

  build_release:
    name: Build and release
    needs: tagging
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master

      # docker cache
      - name: Docker Image Cache
        id: docker-cache
        uses: actions/cache@v3
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: docker-image-go-cross-${{ env.GO_VERSION }}

      # pull docker image
      - name: Pull Docker Image
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          docker pull "$DOCKER_IMAGE:v$GO_VERSION"
          mkdir -p "$IMAGE_CACHE_DIR"
          docker save -o "$IMAGE_CACHE_DIR/go-cross.tar" "$DOCKER_IMAGE:v$GO_VERSION"

      # restore docker image from cache
      - name: Restore Docker Image from Cache
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: docker load -i ${{ env.IMAGE_CACHE_DIR }}/go-cross.tar

      # setup git-chglog
      - name: Setup git-chglog
        <<: *setup-git-chglog

      # pre-build
      - name: Pre-Build
        run: |-
          mkdir -p local
          git-chglog ${VERSION} > local/release-notes.md
          echo 'GITHUB_TOKEN=${{secrets.GITHUB_TOKEN}}' > local/.release-env

      # build and release
      - name: Build and Release
        run: |
          docker run \
            --rm \
            --privileged \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd)/sysroot:/sysroot \
            -v $(pwd):/go/src/$PACKAGE_NAME \
            -w /go/src/$PACKAGE_NAME \
            -e CGO_ENABLED=1 \
            --env-file local/.release-env \
            ghcr.io/goreleaser/goreleaser-cross:v$GO_VERSION \
            release --rm-dist --skip-validate \
            --release-notes local/release-notes.md

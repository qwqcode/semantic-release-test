name: Release Build
run-name: Release ${{ inputs.custom || inputs.semver }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      semver:
        type: choice
        description: Which version you want to increment?
        options:
          - patch
          - minor
          - major
        required: true
      custom:
        description: 'Custom tag name (i.e v1.0.0-rc)'
        required: false
        default: ''
  # push:
  #   tags:
  #     - v*

env:
  GO_VERSION: '1.19.4'
  DOCKER_IMAGE: ghcr.io/goreleaser/goreleaser-cross
  IMAGE_CACHE_DIR: /tmp/cache/docker-image

jobs:
  tagging:
    name: Tagging new version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Git Fetch
        run: git fetch --prune --unshallow --tags -f

      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org/

      - name: Handle Version Number
        run: |
          if [ ! -z "${{ inputs.custom }}" ]; then
            if [[ ! "${{ inputs.custom }}" =~ ^v.* ]]; then
              echo "[err] custom tag name must be v*."
              exit 1
            fi
            next_version="${{ inputs.custom }}"
          else
            prev_version="$(git describe --tags --abbrev=0)"
            next_version="v$(npx semver --increment '${{ inputs.semver }}' '${prev_version}')"
          fi
          
          echo "next_version: ${next_version}"
          echo "VERSION=${next_version}" >> $GITHUB_ENV

      - name: Changelog and Tagging
        run: |
          if [ ! $(git tag -l "${{ env.VERSION }}") ]; then
            make changelog
            git config user.name github-actions[bot]
            git config user.email 41898282+github-actions[bot]@users.noreply.github.com
            git add CHANGELOG.md
            git commit -m "chore: update changelog for ${{ env.VERSION }}"
            git tag '${{ env.VERSION }}'
            git push origin master '${{ env.VERSION }}'
          else
            echo "skipped because git tag already exists."
          fi

  build_release:
    name: Build and release
    needs: tagging
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master

      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      # docker cache
      - name: Docker Image Cache
        id: docker-cache
        uses: actions/cache@v3
        with:
          path: ${{ env.IMAGE_CACHE_DIR }}
          key: docker-image-go-cross-${{ env.GO_VERSION }}

      # pull docker image
      - name: Pull Docker Image
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:v${{ env.GO_VERSION }}
          mkdir -p ${{ env.IMAGE_CACHE_DIR }}
          docker save -o ${{ env.IMAGE_CACHE_DIR }}/go-cross.tar ${{ env.DOCKER_IMAGE }}:v${{ env.GO_VERSION }}

      # restore docker image from cache
      - name: Restore Docker Image from Cache
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: docker load -i ${{ env.IMAGE_CACHE_DIR }}/go-cross.tar
        
      # pre-build
      - name: Setup Release Environment
        run: |-
          echo 'GITHUB_TOKEN=${{secrets.GITHUB_TOKEN}}' > .release-env

      # build and release
      - name: Build and Release
        run: make release

